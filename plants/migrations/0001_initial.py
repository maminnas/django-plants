# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-03-08 23:45
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Actions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.TextField()),
                ('property', models.TextField()),
                ('value', models.TextField(blank=True, null=True)),
                ('citation', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'actions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ActiveGrowthPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'active_growth_period',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Allelopathic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=80, null=True)),
            ],
            options={
                'db_table': 'allelopathic',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Animals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=80, null=True)),
            ],
            options={
                'db_table': 'animals',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BiochemicalMaterialProd',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'biochemical_material_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CanopyDensity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'canopy_density',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CulturalAndAmenityProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cultural_and_amenity_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DroughtTol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'drought_tol',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Duration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'duration',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EndemicStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'endemic_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ErosionControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'erosion_control',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FireTol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fire_tol',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FloodTol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'flood_tol',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FlowerColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'flower_color',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FoliageColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'foliage_color',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FoodProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'food_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FruitColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fruit_color',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HarvestPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'harvest_period',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HumidityTol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'humidity_tol',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Insects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'insects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'layer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LeafRetention',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'leaf_retention',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Lifespan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lifespan',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LivestockBloat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'livestock_bloat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MedicinalsProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'medicinals_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralNutrientsProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mineral_nutrients_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NutrientRquirements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fertility_needs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantActiveGrowthPeriodByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_active_growth_period_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantAnimalAttractorByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_animal_attractor_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantAnimalRegulatorByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_animal_regulator_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantBiochemicalMaterialProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_biochemical_material_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantCanopyDensityByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_canopy_density_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantCulturalAndAmenityProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_cultural_and_amenity_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantDurationByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_duration_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantEndemicStatusByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_endemic_status_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantErosionControlByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_erosion_control_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantFlowerColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_flower_color',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantFoliageColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_foliage_color',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantFoodProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_food_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantFruitColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_fruit_color',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantHarvestPeriodByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_harvest_period_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantInsectAttractorByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_insect_attractor_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantInsectRegulatorByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_insect_regulator_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_layer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantLeafRetentionByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_leaf_retention_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantMedicinalsProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_medicinals_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantMineralNutrientsProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_mineral_nutrients_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantNutrientRquirementsByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_fertility_needs_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantRawMaterialsProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_raw_materials_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantShadeTolByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_shade_tol_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantSoilDrainageTolByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_soil_drainage_tol_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantSunNeedsByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_sun_needs_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlantWaterNeedsByRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'plants_water_needs_by_region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RawMaterialsProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'raw_materials_prod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'regions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SaltTol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'salt_tol',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ShadeTol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'shade_tol',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SoilDrainageTol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'soil_drainage_tol',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SunNeeds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sun_needs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Toxicity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'toxicity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ToxinRemoval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'toxin_removal',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('transaction_type', models.TextField(blank=True, null=True)),
                ('plants_id', models.IntegerField(blank=True, null=True)),
                ('ignore', models.BooleanField()),
            ],
            options={
                'db_table': 'transactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UrlTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'url_tags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.TextField()),
                ('creation_timestamp', models.DateTimeField()),
                ('email', models.TextField()),
                ('enabled', models.BooleanField()),
                ('real_name', models.TextField()),
            ],
            options={
                'db_table': 'users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WaterNeeds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'water_needs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WindTol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'wind_tol',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnimalFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'animal_food',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Barrier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'barrier',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DegreeOfSerotiny',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'degree_of_serotiny',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=160, null=True)),
            ],
            options={
                'db_table': 'family',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FamilyCommonName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=160, null=True)),
            ],
            options={
                'db_table': 'family_common_name',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ImageURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.URLField(blank=True, null=True)),
            ],
            options={
                'db_table': 'image_urls',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genus', models.CharField(blank=True, max_length=160, null=True)),
                ('species', models.CharField(blank=True, max_length=160, null=True)),
                ('variety', models.CharField(blank=True, max_length=160, null=True)),
                ('common_name', models.CharField(blank=True, max_length=160, null=True)),
                ('tags', models.URLField(blank=True, max_length=160, null=True)),
                ('pH_min', models.DecimalField(blank=True, db_column='ph_min', decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MaxValueValidator(14, message='ph should be in range 0-14')])),
                ('pH_max', models.DecimalField(blank=True, db_column='ph_max', decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MaxValueValidator(14, message='ph should be in range 0-14')])),
                ('minimum_temperature_tol', models.IntegerField(blank=True, null=True)),
                ('innoculant', models.CharField(blank=True, max_length=160, null=True)),
                ('allelochemicals', models.CharField(blank=True, max_length=160, null=True)),
                ('active_growth_period', models.ManyToManyField(through='plants.PlantActiveGrowthPeriodByRegion', to='plants.ActiveGrowthPeriod')),
                ('allelopathic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Allelopathic')),
            ],
            options={
                'db_table': 'plants',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PlantAnimalFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('animal_food', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.AnimalFood')),
                ('plants', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant')),
            ],
            options={
                'db_table': 'plants_animal_food',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PlantBarrier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barrier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Barrier')),
                ('plants', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant')),
                ('regions', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Region')),
            ],
            options={
                'db_table': 'plants_barrier_by_region',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PlantRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('spread', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('root_depth', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('plants', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant')),
                ('regions', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Region')),
            ],
            options={
                'db_table': 'plants_region',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Serotiny',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'serotiny',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TheFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=160, null=True)),
            ],
            options={
                'db_table': 'the_family',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TheFamilyCommonName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=160, null=True)),
            ],
            options={
                'db_table': 'the_family_common_name',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='plant',
            name='animal_food',
            field=models.ManyToManyField(through='plants.PlantAnimalFood', to='plants.AnimalFood'),
        ),
        migrations.AddField(
            model_name='plant',
            name='barrier',
            field=models.ManyToManyField(through='plants.PlantBarrier', to='plants.Barrier'),
        ),
        migrations.AddField(
            model_name='plant',
            name='biochemical_material_prod',
            field=models.ManyToManyField(through='plants.PlantBiochemicalMaterialProd', to='plants.BiochemicalMaterialProd'),
        ),
        migrations.AddField(
            model_name='plant',
            name='canopy_density',
            field=models.ManyToManyField(through='plants.PlantCanopyDensityByRegion', to='plants.CanopyDensity'),
        ),
        migrations.AddField(
            model_name='plant',
            name='cultural_and_amenity_prod',
            field=models.ManyToManyField(through='plants.PlantCulturalAndAmenityProd', to='plants.CulturalAndAmenityProd'),
        ),
        migrations.AddField(
            model_name='plant',
            name='degree_of_serotiny',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.DegreeOfSerotiny'),
        ),
        migrations.AddField(
            model_name='plant',
            name='drought_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.DroughtTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='duration',
            field=models.ManyToManyField(through='plants.PlantDurationByRegion', to='plants.Duration'),
        ),
        migrations.AddField(
            model_name='plant',
            name='endemic_status',
            field=models.ManyToManyField(through='plants.PlantEndemicStatusByRegion', to='plants.EndemicStatus'),
        ),
        migrations.AddField(
            model_name='plant',
            name='erosion_control',
            field=models.ManyToManyField(through='plants.PlantErosionControlByRegion', to='plants.ErosionControl'),
        ),
        migrations.AddField(
            model_name='plant',
            name='family',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.TheFamily'),
        ),
        migrations.AddField(
            model_name='plant',
            name='family_common_name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.TheFamilyCommonName'),
        ),
        migrations.AddField(
            model_name='plant',
            name='fertility_needs',
            field=models.ManyToManyField(through='plants.PlantNutrientRquirementsByRegion', to='plants.NutrientRquirements', verbose_name='Nutrient Rquirements'),
        ),
        migrations.AddField(
            model_name='plant',
            name='fire_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.FireTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='flood_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.FloodTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='flower_color',
            field=models.ManyToManyField(through='plants.PlantFlowerColor', to='plants.FlowerColor'),
        ),
        migrations.AddField(
            model_name='plant',
            name='foliage_color',
            field=models.ManyToManyField(through='plants.PlantFoliageColor', to='plants.FoliageColor'),
        ),
        migrations.AddField(
            model_name='plant',
            name='food_prod',
            field=models.ManyToManyField(through='plants.PlantFoodProd', to='plants.FoodProd'),
        ),
        migrations.AddField(
            model_name='plant',
            name='fruit_color',
            field=models.ManyToManyField(through='plants.PlantFruitColor', to='plants.FruitColor'),
        ),
        migrations.AddField(
            model_name='plant',
            name='harvest_period',
            field=models.ManyToManyField(through='plants.PlantHarvestPeriodByRegion', to='plants.HarvestPeriod'),
        ),
        migrations.AddField(
            model_name='plant',
            name='humidity_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.HumidityTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='leaf_retention',
            field=models.ManyToManyField(through='plants.PlantLeafRetentionByRegion', to='plants.LeafRetention'),
        ),
        migrations.AddField(
            model_name='plant',
            name='lifespan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Lifespan'),
        ),
        migrations.AddField(
            model_name='plant',
            name='livestock_bloat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.LivestockBloat'),
        ),
        migrations.AddField(
            model_name='plant',
            name='medicinals_prod',
            field=models.ManyToManyField(through='plants.PlantMedicinalsProd', to='plants.MedicinalsProd'),
        ),
        migrations.AddField(
            model_name='plant',
            name='mineral_nutrients_prod',
            field=models.ManyToManyField(through='plants.PlantMineralNutrientsProd', to='plants.MineralNutrientsProd'),
        ),
        migrations.AddField(
            model_name='plant',
            name='plants_animal_attractor',
            field=models.ManyToManyField(related_name='a_plants_animal_attractor_related', through='plants.PlantAnimalAttractorByRegion', to='plants.Animals'),
        ),
        migrations.AddField(
            model_name='plant',
            name='plants_animal_regulator',
            field=models.ManyToManyField(through='plants.PlantAnimalRegulatorByRegion', to='plants.Animals'),
        ),
        migrations.AddField(
            model_name='plant',
            name='plants_insect_attractor',
            field=models.ManyToManyField(related_name='a_plants_insect_attractor_related', through='plants.PlantInsectAttractorByRegion', to='plants.Insects'),
        ),
        migrations.AddField(
            model_name='plant',
            name='plants_insect_regulator',
            field=models.ManyToManyField(through='plants.PlantInsectRegulatorByRegion', to='plants.Insects'),
        ),
        migrations.AddField(
            model_name='plant',
            name='raw_materials_prod',
            field=models.ManyToManyField(through='plants.PlantRawMaterialsProd', to='plants.RawMaterialsProd'),
        ),
        migrations.AddField(
            model_name='plant',
            name='region',
            field=models.ManyToManyField(through='plants.PlantRegion', to='plants.Region'),
        ),
        migrations.AddField(
            model_name='plant',
            name='salt_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.SaltTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='serotiny',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Serotiny'),
        ),
        migrations.AddField(
            model_name='plant',
            name='shade_tol',
            field=models.ManyToManyField(through='plants.PlantShadeTolByRegion', to='plants.ShadeTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='soil_drainage_tol',
            field=models.ManyToManyField(through='plants.PlantSoilDrainageTolByRegion', to='plants.SoilDrainageTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='sun_needs',
            field=models.ManyToManyField(through='plants.PlantSunNeedsByRegion', to='plants.SunNeeds'),
        ),
        migrations.AddField(
            model_name='plant',
            name='toxicity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Toxicity'),
        ),
        migrations.AddField(
            model_name='plant',
            name='toxin_removal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.ToxinRemoval'),
        ),
        migrations.AddField(
            model_name='plant',
            name='water_needs',
            field=models.ManyToManyField(through='plants.PlantWaterNeedsByRegion', to='plants.WaterNeeds'),
        ),
        migrations.AddField(
            model_name='plant',
            name='wind_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.WindTol'),
        ),
        migrations.AddField(
            model_name='imageurl',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant'),
        ),
        migrations.AddField(
            model_name='familycommonname',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant'),
        ),
        migrations.AddField(
            model_name='family',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plants_plant_related', to='plants.Plant'),
        ),
        migrations.CreateModel(
            name='PlantBehavior',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('plants.plant',),
        ),
        migrations.CreateModel(
            name='PlantCharacteristic',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('plants.plant',),
        ),
        migrations.CreateModel(
            name='PlantID',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('plants.plant',),
        ),
        migrations.CreateModel(
            name='PlantNeed',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('plants.plant',),
        ),
        migrations.CreateModel(
            name='PlantProduct',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('plants.plant',),
        ),
        migrations.CreateModel(
            name='PlantTolerance',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('plants.plant',),
        ),
        migrations.AlterUniqueTogether(
            name='plantregion',
            unique_together=set([('plants', 'regions')]),
        ),
        migrations.AlterUniqueTogether(
            name='plantbarrier',
            unique_together=set([('plants', 'regions')]),
        ),
        migrations.AlterUniqueTogether(
            name='familycommonname',
            unique_together=set([('value', 'plants')]),
        ),
    ]
